Введение в автосалоне данной АИС позволит автоматизировать сбор и хранение информации о структуре автосалона, клиентах, менеджерах, механиках, автомобилях, а также позволит отслеживать продажу автомобилей и их запись на сервисное обслуживание.

Введение в поликлинике данной АИС позволит автоматизировать сбор и хранение информации о структуре поликлиники, пациентах, врачах, их специальностях, лекарствах, а также позволит удобно вносить информацию о приёме пациентов и поставленных им диагнозов.

При поступлении нового клиента, автомобиля или при принятии на работу нового механика и менеджера - их можно добавить в таблицу при помощи специальной формы. 

При поступлении нового пациента или при принятии на работу нового врача - их можно добавить в таблицу при помощи специальной формы.

Система позволяет формировать списки доступных для продажи автомобилей, а также клиентских автомобилей, привезенных на сервисное обслуживание. 

Система позволяет формировать списки доступных для приёма пациентов врачей, а также пациентов, пришедших на приём.

Основные задачи автосалона:
•	Подписание договоров купли-продажи автомобиля между клиентом и менеджером;
•	Прием заявок на сервисное обслуживание клиентских автомобилей.

Основные задачи поликлиники:
•	Прием пациентов;
•   Постановка диагноза;
•	Выписка рецептов лекарств;


Система предназначена для пользования тремя видами пользователей:

1.	Администратор - имеет доступ ко всем функциям системы, может добавлять, удалять и редактировать данные в таблицах, а также создавать новых пользователей.
2.  Врач - имеет доступ к таблицам пациентов, лекарств, диагнозов, и приёмов, может добавлять, удалять и редактировать данные в таблицах.
3.  Пациент - имеет доступ к собственной информации, может просматривать свои приёмы и диагнозы.

Система предназначена для пользования тремя видами пользователей:
1. Администратор. Этим пользователям необходимо, чтобы система удовлетворяла следующим требованиям:
- Возможность просмотра, добавления, удаления и редактирования информации о пациентах;
- Возможность просмотра, добавления, удаления и редактирования информации о врачах;
- Возможность просмотра, добавления, удаления и редактирования информации о кабинетах;
- Возможность просмотра, добавления, удаления и редактирования информации о лекарствах;
- Возможность просмотра, добавления, удаления и редактирования информации о приёмах;
- Возможность просмотра, добавления, удаления и редактирования информации о диагнозах;
2. Врач. Этим пользователям необходимо, чтобы система удовлетворяла следующим требованиям:
- Возможность просмотра, добавления, и редактирования информации о пациентах;
- Возможность просмотра информации о кабинетах;
- Возможность просмотра, добавления, удаления и редактирования информации о лекарствах;
- Возможность просмотра, добавления, удаления и редактирования информации о приёмах;
- Возможность просмотра, добавления, удаления и редактирования информации о диагнозах;
3. Пациент. Этим пользователям необходимо, чтобы система удовлетворяла следующим требованиям:
- Возможность просмотра информации о пациентах (своей);
- Возможность просмотра информации о приёмах (своих);
- Возможность просмотра информации о диагнозах (своих).
- Возможность просмотра информации о лекарствах.
- Возможность просмотра информации о кабинетах.
- Возможность просмотра информации о врачах.

В результате анализа предметной области были выделены следующие сущности:
1.	Врач;
2.  Специальность;
3.	Пациент;
4.  Кабинет;
5.	Лекарство;
6.	Приём;
7.	Диагноз.

1.1. Разработать АИС, отвечающую на запросы об автомобилях, о клиентах, о технических обслуживаниях, структуре автосалона.

1.1. Разработать АИС, отвечающую на запросы о пациентах, о врачах, о приёмах, о диагнозах, о структуре поликлиники.

// postgres
create database lab2;

create table doctors(
    id serial primary key,
    name varchar(50) not null,
    date_of_birth date not null,
    phone_number varchar(50) not null,
    date_of_employment date not null default current_date,
);

create table appointments(
    id serial primary key,
    doctor_id int not null,
    patient_id int not null,
    cabinet_id int not null,
    foreign key (doctor_id) references doctors(id),
);

// вставить по 12 записей в каждую таблицу (2 дубликата)
insert into doctors(name, date_of_birth, phone_number) values ('Иванов Иван Иванович', '1990-01-01', '1234567890'),
('Петров Петр Петрович', '1990-01-02', '1234565490'),
('Сидоров Сидор Сидорович', '1990-04-01', '1234531890'),
('Тимуров Тимур Тимурович', '1991-11-09', '8912443142'),
('Сидоров Сидор Сидорович', '1990-04-01', '1234531890'),
('Петров Петр Петрович', '1990-01-02', '1234565490'),
('Александров Александр Александрович', '1990-01-04', '1214565490'),
('Марьевна Мария Александровна', '1993-04-05', '123123123'),
('Александров Александр Александрович', '1990-01-04', '1214565490'),
('Сидоров Сидор Сидорович', '1990-04-01', '1234531890'),
('Петров Петр Петрович', '1990-01-02', '1234565490'),
('Иванов Иван Иванович', '1990-01-01', '1234567890');

insert into appointments(doctor_id, patient_id, cabinet_id) values (1, 1, 1),
(2, 2, 2),
(3, 3, 3),
(4, 4, 4),
(4, 4, 4),
(5, 5, 5),
(6, 6, 6),
(6, 6, 6),
(8, 8, 8),
(9, 9, 9),
(10, 10, 10),
(11, 11, 11),

// применить right join c использованием max и having
select doctors.name, max(appointments.id) as max_id
from doctors
right join appointments on doctors.id = appointments.doctor_id
group by doctors.name
having max(appointments.id) > 1;

// применить limit и distinct
select distinct doctors.name
from doctors
limit 3;

//последние 3
select doctors.name
from doctors
order by doctors.id desc
limit 3;

//посередине 3
select doctors.name
from doctors
order by doctors.id
limit 3 offset 3;

